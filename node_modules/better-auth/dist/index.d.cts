export * from '@better-auth/core/env';
import { BetterAuthOptions } from '@better-auth/core';
export * from '@better-auth/core';
export { BetterAuthAdvancedOptions, BetterAuthClientOptions, BetterAuthClientPlugin, BetterAuthCookies, BetterAuthOptions, BetterAuthPlugin, BetterAuthRateLimitOptions, ClientAtomListener, ClientStore } from '@better-auth/core';
export * from '@better-auth/core/oauth2';
export * from '@better-auth/core/error';
export * from '@better-auth/core/utils';
import { DBTransactionAdapter } from '@better-auth/core/db/adapter';
export { Where } from '@better-auth/core/db/adapter';
export { f as AdditionalSessionFieldsInput, g as AdditionalSessionFieldsOutput, d as AdditionalUserFieldsInput, e as AdditionalUserFieldsOutput, A as Auth, i as FilterActions, F as FilteredAPI, b as InferAPI, h as InferPluginTypes, a as InferSession, j as InferSessionAPI, I as InferUser, M as Models, W as WithJsDoc, c as betterAuth } from './shared/better-auth.SqoB1_Dr.cjs';
export { HookEndpointContext, init } from './types/index.cjs';
export { I as InferOptionSchema, a as InferPluginErrorCodes } from './shared/better-auth.CtDEK5dv.cjs';
export { A as Adapter, b as AdapterInstance, a as AdapterSchemaCreation, T as TransactionAdapter } from './shared/better-auth.Bn2XUCG7.cjs';
export { A as AtomListener, C as ClientOptions, b as InferActions, i as InferAdditionalFromClient, a as InferClientAPI, c as InferErrorCodes, f as InferPluginsFromClient, g as InferSessionFromClient, h as InferUserFromClient, I as IsSignal, S as SessionQueryParams, e as Store } from './shared/better-auth.Buokdd_y.cjs';
export { H as HIDE_METADATA } from './shared/better-auth.DEHJp1rk.cjs';
export { g as generateState, p as parseState } from './shared/better-auth.ComctQAf.cjs';
export * from 'better-call';
export { APIError } from 'better-call';
export * from 'zod/v4';
export * from 'zod/v4/core';
export { A as Awaitable, D as DeepPartial, E as Expand, H as HasRequiredKeys, c as LiteralNumber, L as LiteralString, e as LiteralUnion, O as OmitId, d as PreserveJSDoc, a as Prettify, P as PrettifyDeep, b as Primitive, R as RequiredKeysOf, S as StripEmptyObjects, U as UnionToIntersection, W as WithoutEmpty } from './shared/better-auth.DNnBkMGu.cjs';
export { TelemetryEvent, createTelemetry, getTelemetryAuthConfig } from '@better-auth/telemetry';
export { Account, RateLimit, Session, User, Verification } from '@better-auth/core/db';
import 'packages/core/dist/oauth2';
import './shared/better-auth.kD29xbrE.cjs';
import 'zod';
import '@better-auth/core/middleware';
import '@better-fetch/fetch';

declare const getCurrentAdapter: (fallback: DBTransactionAdapter<BetterAuthOptions>) => Promise<DBTransactionAdapter<BetterAuthOptions>>;

declare function capitalizeFirstLetter(str: string): string;

declare const generateId: (size?: number) => string;

export { capitalizeFirstLetter, generateId, getCurrentAdapter };
