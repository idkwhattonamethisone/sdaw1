import { BetterAuthOptions } from '@better-auth/core';
import { BetterAuthDBSchema, DBFieldAttribute } from '@better-auth/core/db';
import { DBAdapterFactoryConfig, Where, CustomAdapter as CustomAdapter$1, DBAdapter } from '@better-auth/core/db/adapter';
export * from '@better-auth/core/db/adapter';
import { a as Prettify } from '../shared/better-auth.DNnBkMGu.cjs';
import { T as TransactionAdapter, a as AdapterSchemaCreation } from '../shared/better-auth.Bn2XUCG7.cjs';

type AdapterFactoryOptions = {
    config: AdapterFactoryConfig;
    adapter: AdapterFactoryCustomizeAdapterCreator;
};
/**
 * @deprecated Use `DBAdapterFactoryConfig` from `@better-auth/core/db/adapter` instead.
 */
interface AdapterFactoryConfig extends Omit<DBAdapterFactoryConfig<BetterAuthOptions>, "transaction"> {
    /**
     * Execute multiple operations in a transaction.
     *
     * If the database doesn't support transactions, set this to `false` and operations will be executed sequentially.
     *
     * @default false
     */
    transaction?: false | (<R>(callback: (trx: TransactionAdapter) => Promise<R>) => Promise<R>);
}
type AdapterFactoryCustomizeAdapterCreator = (config: {
    options: BetterAuthOptions;
    /**
     * The schema of the user's Better-Auth instance.
     */
    schema: BetterAuthDBSchema;
    /**
     * The debug log function.
     *
     * If the config has defined `debugLogs` as `false`, no logs will be shown.
     */
    debugLog: (...args: any[]) => void;
    /**
     * Get the model name which is expected to be saved in the database based on the user's schema.
     */
    getModelName: (model: string) => string;
    /**
     * Get the field name which is expected to be saved in the database based on the user's schema.
     */
    getFieldName: ({ model, field }: {
        model: string;
        field: string;
    }) => string;
    /**
     * This function helps us get the default model name from the schema defined by devs.
     * Often times, the user will be using the `modelName` which could had been customized by the users.
     * This function helps us get the actual model name useful to match against the schema. (eg: schema[model])
     *
     * If it's still unclear what this does:
     *
     * 1. User can define a custom modelName.
     * 2. When using a custom modelName, doing something like `schema[model]` will not work.
     * 3. Using this function helps us get the actual model name based on the user's defined custom modelName.
     * 4. Thus allowing us to use `schema[model]`.
     */
    getDefaultModelName: (model: string) => string;
    /**
     * This function helps us get the default field name from the schema defined by devs.
     * Often times, the user will be using the `fieldName` which could had been customized by the users.
     * This function helps us get the actual field name useful to match against the schema. (eg: schema[model].fields[field])
     *
     * If it's still unclear what this does:
     *
     * 1. User can define a custom fieldName.
     * 2. When using a custom fieldName, doing something like `schema[model].fields[field]` will not work.
     *
     */
    getDefaultFieldName: ({ model, field, }: {
        model: string;
        field: string;
    }) => string;
    /**
     * Get the field attributes for a given model and field.
     *
     * Note: any model name or field name is allowed, whether default to schema or not.
     */
    getFieldAttributes: ({ model, field, }: {
        model: string;
        field: string;
    }) => DBFieldAttribute;
    transformInput: (data: Record<string, any>, defaultModelName: string, action: "create" | "update", forceAllowId?: boolean) => Promise<Record<string, any>>;
    transformOutput: (data: Record<string, any>, defaultModelName: string, select?: string[]) => Promise<Record<string, any>>;
    transformWhereClause: <W extends Where[] | undefined>({ model, where, }: {
        where: W;
        model: string;
    }) => W extends undefined ? undefined : CleanedWhere[];
}) => CustomAdapter;
/**
 * @deprecated Use `CustomAdapter` from `@better-auth/core/db/adapter` instead.
 */
interface CustomAdapter extends Omit<CustomAdapter$1, "createSchema"> {
    createSchema?: (props: {
        /**
         * The file the user may have passed in to the `generate` command as the expected schema file output path.
         */
        file?: string;
        /**
         * The tables from the user's Better-Auth instance schema.
         */
        tables: BetterAuthDBSchema;
    }) => Promise<AdapterSchemaCreation>;
}
/**
 * @deprecated Use `CleanedWhere` from `@better-auth/core/db/adapter` instead.
 */
type CleanedWhere = Prettify<Required<Where>>;
type AdapterTestDebugLogs = {
    resetDebugLogs: () => void;
    printDebugLogs: () => void;
};

type AdapterFactory = (options: BetterAuthOptions) => DBAdapter<BetterAuthOptions>;
declare const createAdapterFactory: ({ adapter: customAdapter, config: cfg, }: AdapterFactoryOptions) => AdapterFactory;

/**
 * @deprecated Use `createAdapterFactory` instead. This export will be removed in the next major version.
 */
declare const createAdapter: ({ adapter: customAdapter, config: cfg, }: AdapterFactoryOptions) => AdapterFactory;
/**
 * @deprecated Use `AdapterFactoryOptions` instead. This export will be removed in the next major version.
 */
type CreateAdapterOptions = AdapterFactoryOptions;
/**
 * @deprecated Use `AdapterFactoryConfig` instead. This export will be removed in the next major version.
 */
type AdapterConfig = AdapterFactoryConfig;
/**
 * @deprecated Use `AdapterFactoryCustomizeAdapterCreator` instead. This export will be removed in the next major version.
 */
type CreateCustomAdapter = AdapterFactoryCustomizeAdapterCreator;

export { createAdapter, createAdapterFactory };
export type { AdapterConfig, AdapterFactory, AdapterFactoryConfig, AdapterFactoryCustomizeAdapterCreator, AdapterFactoryOptions, AdapterTestDebugLogs, CreateAdapterOptions, CreateCustomAdapter, CustomAdapter };
